#
# File:   content-mit-8370x-subtitles/U3L4f.txt
#
# Captions for course module
#
# This file has 216 caption lines.
#
# Do not add or delete any lines.  If there is text missing at the end, please add it to the last line.
#
#----------------------------------------

In addition to the bit flip code,
we also looked at a phase flip code.
And let's just look at it very briefly here.
We're not going to go through the same analysis,
but I want to show you the parallel of what the syndrome
measurement operators are.

Here, the logical code words were plus, plus, plus,
and minus, minus, minus.
Remember plus and minus are 0, plus or minus
1, divided by root 2.
OK.
And here, the syndrome operators are easy to figure out directly
from the bit flip code because, remember,
all we did to get to the phase flip code
was to apply a Hadamard operator.
So if we apply a Hadamard to a Z operator
here, so we conjugate h, what do we get?

X, that's right.
So U1 will be XXI, and U2 will be IXX,
and this is because HZH is equal to X.
And so in the Hadamard basis, we say the syndrome operator
has become these, XXI and IXX.
OK.
So that was very fast.
Now, the reason this is useful to go into
is because it lets us revisit this famous code.
Shor's 9-qubit code.
The problem with a bit flip code here
is that it only corrects for a bit flips.
This only corrects for face flips,
and you'd like to be able to correct
for an arbitrary single qubit error, which
is what the classical codes do, they
correct for arbitrary single bit errors.
But here, we have to correct both phase and bit value
errors.
And Shor 9-qubit code was the very first to ever do that.
And when he came out with it, it was beautiful and obvious
why it worked, but people didn't have a theory of why it worked
and what it is a member of a family for.
And I'll get a little into that when
we see the conditions for quantitative error correction.
But now that we have this formalism of what the syndrome
operators are and the recovery operators are,
we can easily see what the 9-qubit code is doing.
So remember, the code parameters are n, k.

And for this, n is equal to 9, and K is equal to 1.
OK.
So the code words of the short code are these.
0 is 000 plus 111 times 3 times normalized by square root of 8.
And logical 1 is 0000 minus 111 times 3 times divided by 8.
Square root.
Now, what I want to give you is a syndrome operator fore
Shor's 9-qubit code because that way
you'll know what the entire error correction procedure is.
You can figure out what the recovery operators
are fairly straightforwardly.
But the syndrome operators might not be so obvious.

They are Z1 Z2, Z2, Z3, Z4, Z5, Z5, Z6, Z7, Z8, Z8, Z8.
And these correct for what kind of errors?

Yes, please.
Bit flip errors.

And then perhaps the non obvious ones
are the face flips syndrome operators.
They are X1, X2, X3, X4, X5, X6.
So that's one operator.
And the other one is X4, X5, X6, X7, X8, X9.
So altogether, we have 1, 2, 4, 6, 7, 8, 8 operators.
It encloses 1 qubit.
And this is not an accident that there always seems to be twos--
one fewer syndrome operator than the number
of qubits that are used to do the encoding.
So we had a 3-qubit code here, we have two syndrome operators
we have a 9-qubit code here, we have eight syndrome operators.
There's a pattern to this.
And that pattern we will not see in this semester's course,
but it led to a beautiful PhD thesis
from Caltech by Daniel Gottesman, which
set the floor for something today
known as stabilizer codes.
And that's a beautiful formalism that
is almost directly analogous to the formalism of linear codes
for classical codes.
And we don't have the time to cover that this semester,
but it's a beautiful theory that you
can get into if you take a second semester course.
OK.
What I want to do, though, is to take five minutes
or so and just challenge you to give me an error.
And then we'll work out the syndrome for that error
for the 9-qubit code.
I claim that every single qubit error
you give me, that's an X, a Z, or Y, because Y
is X times Z, with up to sines.
There will be a unique value of the eight syndrome bits
that we measure here.
And we don't have to work them all out, but at least one
of those syndrome bits should be a 1 instead of a 0
showing me that there's an error associated with that syndrome.
OK.
So somebody give me an error specified by an X,
Y, or a Z on a specified qubit, 1 through 9.
Who's first?
You've raised your hand too many times.
Anybody else?
This is an easy question.
Yes, please.
Yes.
X on 5.
So let's write a little table for an error, which is X on 5,
in this case.
Which syndrome operator is non-zero?
OK.
So I claim that that's covered right here.
This pair of Z's is actually measuring
the parity between qubits.
So it says, are these two qubits the same?
Are they both 0's or are they both 1's?
If they're both 0's, then this is a 0.
If one is a 0 and the other one is a 1,
then the measurement gives you a 1 instead,
because it sees the parity is different.
Notice how it's always comparing two qubits.
It never looks at the value of the encoded qubit.
It looks at these patterns between qubits.
So if you flip just the fifth qubit,
then this suddenly will give you a minus sign
and this will give you a minus sign.
So we get Z4, Z5, and Z5, Z6 will be non-0.
Now, if you flip a qubit like the fifth qubit,
does that change the value of this syndrome?

We didn't go into the phase flip code very much,
but there should be a fast way by which you
can argue it does not change the syndrome measurement value.
Why is that?
And it's just the idea that this error
commutes with the measurement observable.
And if you commute with the measurement observable,
you don't change the measurement result.
So X5 commutes with this because it's just
another X. And so it doesn't change the measurement result.
But the reason that's true is exactly the one
that you describe.
So it's more fundamental to say what you said.
And the upshot is that we can use this simpler argument
of any observable that can be used with our measurement
observable cannot change the measurement value when you are
making these larger arguments.
OK.
So another error.
That was an easy one.

Y6.
Y6.
Right.
Great.
OK.
So Y6 is a product of Z6 and X6, so you can think
that both errors occurred.
Now, that X6 is clearly going to change this operator
here and not this operator.
So we get a Z5, Z6.

But the X6 is going to commute with all of these.
On the other hand, the Y6--
excuse me, the Z6, is going to commute with all of these.
Remember these two are the phase flip error syndrome.

And so the Z6 is going to trigger the X1,
X2, X3, X4, X5, X6 operator and that's going to be equal to 1
when you do the measurement.

I'm missing one, too.
Right?
It's also going to trigger the last one.
So that's X4, X5, X6, X7, X8, X9.

So in many ways, what you can do is,
you can take this combination here, the first three qubits,
is actually like one monster qubit.
And here's another monster qubit.
So this is like X, 1, 2, 3, X, 4, 5, 6 is equal to this thing.
This is like X 4, 5, 6, X 7, 8, 9, is equal to this thing.
So you can see this is just like the bit flip cases here,
but with monster grouping of three qubits acting as one.
And the reason that's true is because we have the structure
up here of a plus plus plus.
If I were to write out that whole state,
this 0000 plus 111 cubed--
see?
I started dropping my cats.
This is 000 plus 111, 000 plus 111, 000 plus 111, like that.
And so this is, if you look at it from afar,
it looks like a monster plus plus plus,
and then the 000 minus 111 is something like a minus minus
minus.
And so that's the phase flip code.
That's why our error syndromes look like these groupings
of excess together.
OK.
So this is a game that you can play,
and what you'd like to do is to figure out
the minimum number of these kinds of syndrome operators
in order to be able to uniquely determine a given error.
And this gives you bounds on how many
qubits you need in order to correct what number of errors
and so forth.
